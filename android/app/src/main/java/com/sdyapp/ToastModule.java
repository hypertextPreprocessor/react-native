// ToastModule.java
package com.sdyapp;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.uimanager.IllegalViewOperationException;
import com.facebook.react.uimanager.PixelUtil;
import com.facebook.react.bridge.Callback;


import java.util.List;
import java.util.Map;
import java.util.HashMap;

public class ToastModule extends ReactContextBaseJavaModule {

    private static final String DURATION_SHORT_KEY = "SHORT";
    private static final String DURATION_LONG_KEY = "LONG";

    public ToastModule(ReactApplicationContext reactContext) {
        super(reactContext);
    }

    @Override
    public String getName() {
        return "ToastExample";
    }

    @Override
    public Map<String, Object> getConstants() {
        final Map<String, Object> constants = new HashMap<>();
        constants.put(DURATION_SHORT_KEY, Toast.LENGTH_SHORT);
        constants.put(DURATION_LONG_KEY, Toast.LENGTH_LONG);
        return constants;
    }

    @ReactMethod
    public void show(String message, int duration) {
        Toast.makeText(getReactApplicationContext(), message + duration, duration).show();
    }

    @ReactMethod
    public void measureLayout(
            int tag,
            int ancestorTag,
            Callback errorCallback,
            Callback successCallback) {
        try {
//            Toast.makeText(getReactApplicationContext(), tag, ancestorTag).show();
            int result = tag + ancestorTag;
            successCallback.invoke(result);
        } catch (IllegalViewOperationException e) {
            errorCallback.invoke(e.getMessage());
        }
    }

    @ReactMethod
    public void measureData(
            String host,
            int port,
            Callback errorCallback,
            Callback successCallback) {
        try {
            char[] chars = {0x4D, 0x52, 0x55, 0x69, 0x12, 0x0A, 0x12, 0x10, 0x2C, 0x16, 0x29, 0x7C, 0x06, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0xE0, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0xFE, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFF, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x04, 0xE1, 0x4E, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x05, 0x3B, 0x53, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x0B, 0x2B, 0x43, 0x48, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x47, 0x61, 0x73, 0x00, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x41, 0x6D, 0x62, 0x00, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x72, 0x61, 0x66, 0x74, 0x00, 0x00, 0x01, 0xFE, 0x6D, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x50, 0x72, 0x65, 0x73, 0x73, 0x00, 0x00, 0x01, 0xFE, 0x6D, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x53, 0x6D, 0x70, 0x46, 0x6C, 0x00, 0x00, 0x35, 0x00, 0x6C, 0x2F, 0x73, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x6F, 0x6C, 0x65, 0x72, 0x00, 0x32, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x68, 0x6F, 0x73, 0x65, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x55, 0x58, 0x2D, 0x31, 0x00, 0x80, 0x00, 0x00, 0xB0, 0x43, 0x00, 0x55, 0x58, 0x00, 0x00, 0x00, 0x44, 0x36, 0xAB};
            List short_items = MruAnalyse.getMru(chars);
//            System.out.println(JSON.toJSONString(short_items));
            String result =JSON.toJSONString(short_items);
            successCallback.invoke(result);
        } catch (IllegalViewOperationException e) {
            errorCallback.invoke(e.getMessage());
        }
    }
}