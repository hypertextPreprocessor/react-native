package com.sdyapp;


import com.alibaba.fastjson.JSON;

import org.json.JSONArray;
import org.json.JSONStringer;

import java.util.*;

public class MruAnalyse {

    public static void analyse(byte[] bytes) {

    }

    public static void main(String[] args) {
/*        char[] chars = {0x4D, 0x52, 0x55, 0x69, 0x12, 0x0A, 0x12, 0x10, 0x2C, 0x16, 0x29, 0x7C, 0x06, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0xE0, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0xFE, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFF, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x04, 0xE1, 0x4E, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x05, 0x3B, 0x53, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x0B, 0x2B, 0x43, 0x48, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x47, 0x61, 0x73, 0x00, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x41, 0x6D, 0x62, 0x00, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x72, 0x61, 0x66, 0x74, 0x00, 0x00, 0x01, 0xFE, 0x6D, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x50, 0x72, 0x65, 0x73, 0x73, 0x00, 0x00, 0x01, 0xFE, 0x6D, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x53, 0x6D, 0x70, 0x46, 0x6C, 0x00, 0x00, 0x35, 0x00, 0x6C, 0x2F, 0x73, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x6F, 0x6C, 0x65, 0x72, 0x00, 0x32, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x68, 0x6F, 0x73, 0x65, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x55, 0x58, 0x2D, 0x31, 0x00, 0x80, 0x00, 0x00, 0xB0, 0x43, 0x00, 0x55, 0x58, 0x00, 0x00, 0x00, 0x44, 0x36, 0xAB};
        String dex = MruTcpClient.charsToDex(chars);
        System.out.println(chars.length);
        System.out.println(dex);*/

/*        char[] test={0x08,0x30};

        System.out.println((test[0]<<8)+test[1]);*/
        char[] chars = {0x4D, 0x52, 0x55, 0x69, 0x12, 0x0A, 0x12, 0x10, 0x2C, 0x16, 0x29, 0x7C, 0x06, 0xF4, 0xFF, 0xFF, 0xFF, 0xFF, 0x10, 0xE0, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x08, 0x30, 0xFE, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x02, 0xFF, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x04, 0xE1, 0x4E, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x05, 0x3B, 0x53, 0x4F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x6D, 0x00, 0x00, 0x0B, 0x2B, 0x43, 0x48, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x47, 0x61, 0x73, 0x00, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x41, 0x6D, 0x62, 0x00, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x72, 0x61, 0x66, 0x74, 0x00, 0x00, 0x01, 0xFE, 0x6D, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x50, 0x72, 0x65, 0x73, 0x73, 0x00, 0x00, 0x01, 0xFE, 0x6D, 0x62, 0x61, 0x72, 0x00, 0x00, 0x00, 0x53, 0x6D, 0x70, 0x46, 0x6C, 0x00, 0x00, 0x35, 0x00, 0x6C, 0x2F, 0x73, 0x00, 0x00, 0x00, 0x00, 0x43, 0x6F, 0x6F, 0x6C, 0x65, 0x72, 0x00, 0x32, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x2D, 0x68, 0x6F, 0x73, 0x65, 0x80, 0x00, 0xFF, 0xB0, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x55, 0x58, 0x2D, 0x31, 0x00, 0x80, 0x00, 0x00, 0xB0, 0x43, 0x00, 0x55, 0x58, 0x00, 0x00, 0x00, 0x44, 0x36, 0xAB};
        List short_items = getMru(chars);
        System.out.println(JSON.toJSONString(short_items));
//        status_of_unit = int.from_bytes(data[20 + Sx + Sy:20 + Sx + Sy + 2],byteorder = 'big', signed = False)
//        CheckSum = int.from_bytes(data[20 + Sx + Sy + 2:20 + Sx + Sy + 4],byteorder = 'big', signed = False)
//        JSONArray jsonArray=new JSONArray();
//        JSONStringer jsonStringer=new JSONStringer();
//        jsonStringer
//        jsonArray.toString();
//        System.out.println(j.toJSONString(obj);short_items);
    }

    public static List getMru(char[] chars) {
        char[] newData;
        int data_len = chars.length;
        char[] startsequence = Arrays.copyOfRange(chars, 0, 4);//data[0:4]
        char[] date_time = Arrays.copyOfRange(chars, 4, 10);//data[4:10]
        char[] unit_type = Arrays.copyOfRange(chars, 10, 12);// int.from_bytes(data[10:12], byteorder='big', signed=False)
        char[] software_version = Arrays.copyOfRange(chars, 12, 14);// int.from_bytes(data[12:14], byteorder='big', signed=False)
        char[] no_of_measurement = Arrays.copyOfRange(chars, 14, 16);//int.from_bytes(data[14:16], byteorder='big', signed=False)
        char[] number_of_further_measurements = Arrays.copyOfRange(chars, 16, 18);//int.from_bytes(data[16:18], byteorder='big', signed=True)
        char[] possible_baud_rate = Arrays.copyOfRange(chars, 18, 19);// int.from_bytes(data[18:19], byteorder='big', signed=False)
        int number_measurement_items = (int) chars[19];
        Arrays.copyOfRange(chars, 19, 20);//int.from_bytes(data[19:20], byteorder='big', signed=False)
        int number_measurement_x = number_measurement_items / 16;
        int number_measurement_y = number_measurement_items - (number_measurement_x * 16);
        int Sx = number_measurement_x * 16;
        int Sy = number_measurement_y * 32;
        char[] short_values = Arrays.copyOfRange(chars, 20, 20 + Sx);//data[20:20 + Sx]
        char[] long_values = Arrays.copyOfRange(chars, 20 + Sx, 20 + Sx + Sy);//data[20 + Sx:20 + Sx + Sy]

        return short_analyse(short_values);
    }

    public static List short_analyse(char[] data) {
        List items = new ArrayList();
        if (data.length < 16) {
            return items;
        }
        int item_num = (int) (data.length / 16);
        for (int i = 0; i < item_num; i++) {
            Map t_item = new HashMap();
            char[] t_itemdata = Arrays.copyOfRange(data, i * 16, (i + 1) * 16);   //data[i * 16:(i + 1) * 16]
            String name = String.valueOf(Arrays.copyOfRange(t_itemdata, 0, 6));
            t_item.put("name", name.trim());// = t_itemdata[0:6].decode("ANSI").replace('\x00','')

//            t_item.put("value", Arrays.copyOfRange(t_itemdata, 6, 8));//  = int.from_bytes(t_itemdata[6:8], byteorder='big', signed=True)
            t_item.put("value",(t_itemdata[6]<<8)+t_itemdata[7]);
            t_item.put("exponent", (byte)t_itemdata[8]);//  = int.from_bytes(t_itemdata[8:9], byteorder='big', signed=True)
            t_item.put("Name_unit", String.valueOf(Arrays.copyOfRange(t_itemdata, 9, 14)).trim());//  = t_itemdata[9:14].decode("ANSI").replace('\x00','')
            t_item.put("mg-factor", (t_itemdata[14]<<8)+t_itemdata[15]);//  = int.from_bytes(t_itemdata[14:16], byteorder='little', signed=False)

            items.add(t_item);
        }
        return items;
    }

    public static int byteArrayToInt(byte[] bytes) {
        int value = 0;
        // 由高位到低位
        for (int i = 0; i < 4; i++) {
            int shift = (4 - 1 - i) * 8;
            value += (bytes[i] & 0x000000FF) << shift;// 往高位游
        }
        return value;
    }
}
